<?php
/**
 * @title Curriculum Vitae CREATOR
 * @author AnderEÃ±o (ander_frago@cuatrovientos.org)
 * @see CV is a composed entity generated by multiple elementes repetitively.
 * A CV can have multiple work experiences, studies, languages and other knowledge.
 */

namespace App\Controller\CvMgr;

use App\Entity\CvMgr\Languages;
use App\Entity\CvMgr\Otherknowledge;
use App\Entity\CvMgr\Studies;
use App\Entity\CvMgr\WorkExperiences;
use App\Entity\CvMgr\CV;

use App\Entity\UserMgr\FormerStudents;
use App\Security\LoginFormAuthenticator;
use DateTime;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\SecurityContext;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Security\Guard\GuardAuthenticatorHandler;


/**
 * @Route("cv")
 */
class CVCreatorController extends AbstractController
{
  // Object used to store the actual CV
  private  $actual_user_cv;
  // @Version Symfony 4.4 https://symfony.com/doc/4.4/security/guard_authentication.html
  private $authenticator;
  private $guardHandler;
  public function __construct(LoginFormAuthenticator $authenticator, GuardAuthenticatorHandler $guardHandler) {
    $this->actual_user_cv = new CV();
    $this->authenticator = $authenticator;
    $this->guardHandler = $guardHandler;
  }
  // Method used to get CV values from session when creating a new CV
  public function checkIfCVinSessionExists(Session $session){
    if(!$session->isStarted())
    {
      $session->start();
    }
    // If there is a cv in session we must continue editing it
    $actual_user_cv_in_session = $session->get('actual_user_cv');
    if(isset($actual_user_cv_in_session) ){
      // else we create a new CV object
      $this->actual_user_cv = $actual_user_cv_in_session;
    }
    else{
      $session->set('actual_user_cv', $this->actual_user_cv);
    }
  }

  // *******************************************
  // INIT: CV creation workflow
  // *******************************************
  /**
  * Creates a new Cvs entity: Main function of the CV creation workflow
  * @Route("/new", name="cvs_new")
  */
  public function newAction(Request $request, Session $session)
  {
    //Check if there is any existing CV in session
    $this->checkIfCVinSessionExists($session);
    // Save the CV element in database to obtain a CV id
    $em = $this->getDoctrine()->getManager();
    $em->persist($this->actual_user_cv);
    // First of all, the user must enter the work-experience,
    // it could be more than one (recursive call to creation form)
    return $this->addWorkExperienceAction($request, $session);
  }
  // *******************************************
  // First step in the work flow => Add work-experience
  // *******************************************
  /**
  * @Route("/new_workexperience", name="workexperience_task_add"))
  */
  public function addWorkExperienceAction(Request $request, Session $session){
    //Check if there is any existing CV in session
    $this->checkIfCVinSessionExists($session);

    $workExperience = new WorkExperiences();
    $form = $this->createForm('App\Form\CvMgr\WorkExperiencesType', $workExperience);
    $form->handleRequest($request);

      if ($form->isSubmitted() && $form->isValid() ) {
      // 1. DateTime parse
      $startDate = $workExperience->getDStartDate();
      $workExperience->setDStartDate(new DateTime($startDate));
      $endDate = $workExperience->getDEndDate();
      $workExperience->setDEndDate(new DateTime($endDate));
      // 2. Set the relation to the CV
      $workExperience->setCv($this->actual_user_cv);
      // 3. Update CV in session
      $this->actual_user_cv = $session->get('actual_user_cv');
      $this->actual_user_cv->addWorkexperience($workExperience);
      $session->set('actual_user_cv', $this->actual_user_cv);

      // Depending on the request the user might want to enter another work-experience (true)
      // or continue to insert studies (false)
      $nextAction = $form->get('saveAndAdd')->isClicked()
        ? 'task_new'
        : 'task_success';

      if( $nextAction == 'task_success' ){
        // Next, the user adds his studies
        return $this->redirectToRoute('studies_task_add');
      }
      else{
        // Clears previous form
        unset($workExperience);
        unset($form);
        // recursive call to addWorkExperienceAction
        return $this->redirectToRoute('workexperience_task_add');
      }
    }
    return $this->render('cvmgr/workexperiences/new.html.twig', array(
      'workExperience' => $workExperience,
      'form' => $form->createView(),
    ));
  }
  // *******************************************
  // Second step in the work flow => Add studies
  // *******************************************
  /**
  * @Route("/new_studies", name="studies_task_add"))
  */
  public function addStudieAction(Request $request, Session $session){
    //Check if there is any existing CV in session
    $this->checkIfCVinSessionExists($session);

    $studies = new Studies();
    $form = $this->createForm('App\Form\CvMgr\StudiesType', $studies);
    $form->handleRequest($request);

      if ($form->isSubmitted() && $form->isValid() ) {
      // 1. DateTime parse
      $startDate = $studies->getDStartDate();
      $studies->setDStartDate(new DateTime($startDate));
      $endDate = $studies->getDEndDate();
      $studies->setDEndDate(new DateTime($endDate));
      // 2. Set the relation to the CV
      $studies->setCv($this->actual_user_cv);
      // 3. Update CV in session
      $this->actual_user_cv = $session->get('actual_user_cv');
      $this->actual_user_cv->addStudies($studies);
      $session->set('actual_user_cv', $this->actual_user_cv);

      // Depending on the request the user might want enter another studies (true)
      // or continue to insert studies (false)
      $nextAction = $form->get('saveAndAdd')->isClicked()
        ? 'task_new'
        : 'task_success';

      if( $nextAction == 'task_success' ){
        // Next, the user adds languages
        return  $this->redirectToRoute('language_task_add');
      }
      else{
        // Clears previous form
        unset($studies);
        unset($form);
        // recursive call to addstudiesAction
        return  $this->redirectToRoute('studies_task_add');
      }
    }

    return $this->render('cvmgr/studies/new.html.twig', array(
      'studies' => $studies,
      'form' => $form->createView(),
    ));
  }
  // *******************************************
  // Third step in the work flow => Add language
  // *******************************************
  /**
  * @Route("/new_language", name="language_task_add"))
  */
  public function addLanguageAction(Request $request , Session $session){    //Check existing CV
    //Check if there is any existing CV in session
    $this->checkIfCVinSessionExists($session);

    $language = new Languages();
    $form = $this->createForm('App\Form\CvMgr\LanguageType', $language);
    $form->handleRequest($request);

      if ($form->isSubmitted() && $form->isValid() ) {
      // Establish relation to CV and user
      $language->setCv($this->actual_user_cv);
      // 2. Set the relation to the CV
      $language->setCv($this->actual_user_cv);
      // 3. Update CV in session
      $this->actual_user_cv = $session->get('actual_user_cv');
      $this->actual_user_cv->addLanguages($language);
      $session->set('actual_user_cv', $this->actual_user_cv);

      // Depending on the request the user might want enter another studies (true)
      // or continue to insert studies (false)
      $nextAction = $form->get('saveAndAdd')->isClicked()
        ? 'task_new'
        : 'task_success';

      if( $nextAction == 'task_success' ){
        // Next, the user adds languages
        return  $this->redirectToRoute('other_task_add');
      }
      else{
        // Clears previous form
        unset($other_knowledge);
        unset($form);
        // recursive call to addOtherKnowledgeAction
        return  $this->redirectToRoute('language_task_add');
      }
    }

    return $this->render('cvmgr/languages/new.html.twig', array(
      'language' => $language,
      'form' => $form->createView(),
    ));
  }
  // *******************************************
  // Fourth step in the work flow => Add other knowledge
  // *******************************************
  /**
   * @Route("/new_otherknowledge", name="other_task_add"))
   */
  public function addOtherKnowledgeAction(Request $request , Session $session){    //Check existing CV
    //Check if there is any existing CV in session
    $this->checkIfCVinSessionExists($session);

    $other_knowledge = new Otherknowledge();
    $form = $this->createForm('App\Form\CvMgr\OtherknowledgeType', $other_knowledge);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid() ) {
      // Establish relation to CV and user
      $other_knowledge->setCv($this->actual_user_cv);
      // 2. Set the relation to the CV
      $other_knowledge->setCv($this->actual_user_cv);
      // 3. Update CV in session
      $this->actual_user_cv = $session->get('actual_user_cv');
      $this->actual_user_cv->addOtherknowledges($other_knowledge);
      $session->set('actual_user_cv', $this->actual_user_cv);

      // Depending on the request the user might want enter another studies (true)
      // or continue to insert studies (false)
      $nextAction = $form->get('saveAndAdd')->isClicked()
        ? 'task_new'
        : 'task_success';

      if( $nextAction == 'task_success' ){
        // Persist values
        $this->getDoctrine()
          ->getRepository(CV::class)
          ->store_cv_values($session, $this->actual_user_cv);
        // CV creation finished.

        // Add user values stored in session to the actual user cv
        $id = $session->get('formerStudentID');
        // Get formed student values from database
        $formerStudent = $this->getDoctrine()->getManager()->getRepository(FormerStudents::class)->find($id);

        // Redirectio to main page after login validation
       /* @Version Symfony 3.4
       // https://symfony.com/doc/4.4/security/guard_authentication.html
        return $this->get('security.authentication.guard_handler')
          ->authenticateUserAndHandleSuccess(
            $formerStudent,
            $request,
            $this->get('app.security.login_form_authenticator'),
            'main'
          );*/
          return $this->guardHandler->authenticateUserAndHandleSuccess(
              $formerStudent,
              $request,
              $this->authenticator,
              'main'
          );
      }
      else{
        // Clears previous form
        unset($other_knowledge);
        unset($form);

        // recursive call to addstudiesAction
        return  $this->redirectToRoute('other_task_add');
      }
    }

    return $this->render('cvmgr/otherknowledge/new.html.twig', array(
      'otherknowledge' => $other_knowledge,
      'form' => $form->createView(),
    ));
  }
  // *******************************************
  // END: CV creation workflow
  // *******************************************
}
