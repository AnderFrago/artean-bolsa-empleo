security:
    encoders:
        App\Entity\UserMgr\User:
            algorithm: auto
    # ðŸ‘‡ Proveedor de la clase Usuario
    providers:
        entity_provider:
            entity:
                class: App\Entity\UserMgr\User
                # ðŸ‘‡ Valor identificador Ãºnico
                property: username

    role_hierarchy:
        ROLE_EMPLOYEER: ROLE_USER
        ROLE_STUDENT: ROLE_USER
        ROLE_ARTEAN: [ ROLE_EMPLOYEER, ROLE_STUDENT ]

    firewalls:
#        dev:
 #           pattern: ^/(_(profiler|wdt)|css|images|js)/
  #          security: false
        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        register:
            pattern:  ^/register
            stateless: true
            anonymous: true

        api:
            pattern:  ^/p
            stateless: true
            anonymous: false
            provider: entity_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/offers, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/p/offers/([0-9]+), roles: IS_AUTHENTICATED_ANONYMOUSLY }